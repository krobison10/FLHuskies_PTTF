import pickle
import pandas as pd

from pathlib import Path
from sklearn.metrics import mean_absolute_error

import lightgbm as lgb

from sklearn.model_selection import RandomizedSearchCV
from sklearn.model_selection import GroupShuffleSplit  

def main():
    airports = [
        "KATL",
        "KCLT",
        "KDEN",
        "KDFW",
        "KJFK",
        "KMEM",
        "KMIA",
        "KORD",
        "KPHX",
        "KSEA",
    ]
    
    maes = []

    for airport in airports:
        print(f"Processing {airport}")
        table: pd.DataFrame = pd.read_csv(f"encoded_mfs/{airport}_etd_w_mfs_encoded.csv", parse_dates=["timestamp"])

        splitter = GroupShuffleSplit(test_size=.20, n_splits=5, random_state = 7)
        split = splitter.split(table, groups=table['gufi'])
        train_inds, test_inds = next(split)

        train = table.iloc[train_inds]
        test = table.iloc[test_inds]

        X_train = train[["minutes_until_etd", "aircraft_engine_class", "aircraft_type", "major_carrier", "flight_type"]].to_numpy()
        X_test = test[["minutes_until_etd", "aircraft_engine_class", "aircraft_type", "major_carrier", "flight_type"]].to_numpy()
        y_train = train["minutes_until_pushback"].to_numpy()
        y_test = test["minutes_until_pushback"].to_numpy()

        gbm = lgb.LGBMRegressor(objective = "regression_l1",
                                num_leaves=4096,
                                n_estimators=128,
                                )
        
        gbm.fit(X_train, y_train,
                eval_metric='l1',
                )

        y_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration_)
        mae_test = mean_absolute_error(y_test, y_pred)
        print(f'The MAE of prediction is: {mae_test}')

        maes.append(mae_test)
    
    print(f"Average MAE: {sum(maes)/len(maes)}")

if __name__ == "__main__":
    main()